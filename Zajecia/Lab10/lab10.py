# -*- coding: utf-8 -*-
"""Lab10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Kx0Xv9SJ_cGCEfjD0inWqCC0Hduy0Xk1

# Zad 1
"""

def metodaProstokatow(poczatek, koniec, iloscPodzialow, f):
  assert koniec >= poczatek
  assert iloscPodzialow > 0

  dx = (koniec - poczatek) / iloscPodzialow

  wynik = 0
  for i in range(1, iloscPodzialow+1):
    wynik += f(poczatek + i*dx)

  wynik *= dx
  return wynik

import pytest
from math import sin, pi

assert metodaProstokatow(1, 3, 1000, lambda x: x) == pytest.approx(4, 0.01)
assert metodaProstokatow(0, pi, 1000, lambda x: sin(x)) == pytest.approx(2, 0.01)

def metodaTrapezow(poczatek, koniec, iloscPodzialow, f):
  assert koniec > poczatek
  assert iloscPodzialow > 0

  dx = (koniec - poczatek) / iloscPodzialow

  wynik = (f(poczatek) + f(koniec)) / 2
  for i in range(1, iloscPodzialow):
    wynik += f(poczatek + i*dx)

  wynik *= dx
  return wynik

import pytest
from math import sin, pi

assert metodaTrapezow(1, 3, 1000, lambda x: x) == pytest.approx(4, 0.01)
assert metodaTrapezow(0, pi, 1000, sin) == pytest.approx(2, 0.01)

def cpu():
  with tf.device('/cpu:0'):
    metodaProstokatow(0, pi, 10_000, sin)
    metodaTrapezow(0, pi, 10_000, sin)

def gpu():
  with tf.device('/device:GPU:0'):
    metodaProstokatow(0, pi, 10_000, sin)
    metodaTrapezow(0, pi, 10_000, sin)

import timeit
import tensorflow as tf

cpu()
gpu()

print('CPU (s):')
cpu_time = timeit.timeit('cpu()', number=1000, setup="from __main__ import cpu")
print(cpu_time)
print('GPU (s):')
gpu_time = timeit.timeit('gpu()', number=1000, setup="from __main__ import gpu")
print(gpu_time)
print('GPU jest szybsze ni≈º CPU: {}x'.format(int(cpu_time/gpu_time)))

"""# Zad 2

Funkcja 1D
"""

import tensorflow as tf 
import numpy as np 
from tensorflow import keras

model = tf.keras.Sequential()
model.add(keras.layers.Dense(units=50,input_shape=[1]))
model.add(keras.layers.Dense(units=50,input_shape=[50]))
model.add(keras.layers.Dense(units=1,input_shape=[50]))

opt = keras.optimizers.Adam(learning_rate=0.01)
model.compile(optimizer=opt,loss='mean_squared_error')

xs = np.arange(-10, 10, 0.01)
ys = np.asarray(list(map(lambda x: (x-2)*(x+1)*(x-4), xs)))

model.fit(xs,ys,epochs=50)

print(model.predict([10.0]))

"""Funkcja 2D"""

model = tf.keras.Sequential()
model.add(keras.layers.Dense(units=50,input_shape=[2]))
model.add(keras.layers.Dense(units=50))
model.add(keras.layers.Dense(units=1))

from math import sin, sqrt

xs = np.arange(-10, 10, 0.01)
ys = np.arange(-10, 10, 0.01)
zs = np.asarray(list(map(lambda x, y: sin(sqrt(x*x + y*y)) / sqrt(x*x + y*y), xs, ys)))

opt = keras.optimizers.Adam(learning_rate=0.01)
model.compile(optimizer=opt,loss='mean_squared_error')

data = []
for i in range(len(xs)):
  data.append(([xs[i], ys[i]]))

data = np.asarray(data)
model.fit(data,zs,epochs=5)

print(model.predict([(5.0, 5.0)]))

"""#Zad3"""

import tensorflow as tf

fashion_mnist = tf.keras.datasets.fashion_mnist
(X_train, y_train), (X_val, y_val) = fashion_mnist.load_data()

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Flatten, add, Dense

model = Sequential()
model.add(Flatten(input_shape=(28, 28)))
model.add(Dense(128, activation='relu'))
model.add(Dense(10, activation = 'softmax'))

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

history = model.fit(X_train, 
                    y_train, 
                    epochs=10,
                    verbose=1,
                    batch_size = 256,
                    validation_split = 0.2
                   )

import numpy as np

class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']


predicted = model.predict(np.expand_dims(X_val[0],0))
class_names[np.argmax(predicted)]